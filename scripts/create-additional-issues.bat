@echo off
echo Creating additional GitHub issues for Runiq...
echo.

REM Issue 47: Data-Driven Rendering
echo Creating issue 47: Data-Driven Rendering System...
"C:\Program Files\GitHub CLI\gh.exe" issue create --repo jgreywolf/runiq --title "Data-Driven Rendering System" --label "enhancement" --body "# Data-Driven Rendering System## OverviewImplement a data-driven rendering system that allows diagrams to be generated from JSON/CSV data sources, enabling dynamic visualizations, charts, and dashboards.## Current Status- ✅ Manual DSL syntax works well- ❌ No data binding or templating- ❌ No dynamic shape generation from data- ❌ Charts require manual node creation## Requirements### Phase 1: Data Source Support (3-4 days)- [ ] JSON data source loader- [ ] CSV data source loader- [ ] Data validation and schema checking- [ ] Error handling for malformed data- [ ] Support for nested/hierarchical data### Phase 2: Template System (3-4 days)- [ ] Template syntax for data binding- [ ] Variable substitution in node properties- [ ] Conditional rendering based on data- [ ] Loops/iteration over data arrays- [ ] Template composition and reuse### Phase 3: Dynamic Shape Generation (2-3 days)- [ ] Generate nodes from data rows- [ ] Auto-generate edges from relationships- [ ] Map data fields to shape properties- [ ] Style mapping from data values- [ ] Legend generation### Phase 4: Chart Support (3-4 days)- [ ] Pie chart data binding- [ ] Bar/column chart generation- [ ] Line chart from time series- [ ] Radar/spider chart from metrics- [ ] Auto-scaling and axis generation## Enables- Pie charts (Issue #10)- XY charts (Issue #15)- Radar charts (Issue #37)- Gantt charts (Issue #16)- Any data-driven visualization## Acceptance Criteria- ✅ Load JSON and CSV data sources- ✅ Template syntax works with variables- ✅ Generate nodes/edges from data- ✅ At least 3 chart types supported- ✅ Comprehensive test coverage- ✅ Documentation with examples## Effort Estimate**1-2 weeks** (10-12 working days)## Priority**High** - Unlocks entire category of data visualizations## Market Value💰💰💰 High - Dashboards and data viz are extremely popular"
echo.

REM Issue 48: User Documentation Guide
echo Creating issue 48: User Documentation Guide...
"C:\Program Files\GitHub CLI\gh.exe" issue create --repo jgreywolf/runiq --title "Create Comprehensive User Documentation" --label "documentation" --body "# Create Comprehensive User Documentation## OverviewCreate complete user-facing documentation to help users get started with Runiq and master all features.## Current Status- ✅ API reference exists (VitePress)- ✅ Shape implementation guides (developer-focused)- ❌ No getting started tutorial- ❌ No user-friendly guides- ❌ No comprehensive examples## Requirements### 1. Getting Started Tutorial (2-3 days)- [ ] Installation instructions- [ ] First diagram walkthrough- [ ] Basic shapes and edges- [ ] Running and exporting- [ ] Common pitfalls and troubleshooting### 2. DSL Syntax Reference (2-3 days)- [ ] Complete syntax documentation- [ ] All node types and properties- [ ] All edge types and styles- [ ] Container syntax- [ ] Style customization- [ ] Layout algorithm options### 3. Layout Algorithm Guide (1-2 days)- [ ] When to use each algorithm- [ ] Layered (hierarchical)- [ ] Force-directed (organic)- [ ] Stress (balanced)- [ ] Tree (hierarchical tree)- [ ] Radial (mindmap/circular)- [ ] Algorithm comparison with examples### 4. Style Customization Guide (1-2 days)- [ ] Color schemes- [ ] Fonts and typography- [ ] Line styles and arrows- [ ] Shape fills and strokes- [ ] Themes and presets### 5. Export Format Guide (1-2 days)- [ ] SVG export options- [ ] LaTeX export (block diagrams)- [ ] Simulink export- [ ] SPICE export (circuits)- [ ] Verilog export- [ ] PNG/PDF rendering options## Structure```docs/guide/├── getting-started.md├── syntax-reference.md├── layout-algorithms.md├── styling.md├── export-formats.md├── diagram-types/│   ├── flowcharts.md│   ├── uml.md│   ├── quantum-circuits.md│   ├── network-topology.md│   ├── electrical-circuits.md│   └── ...└── examples/    ├── beginner/    ├── intermediate/    └── advanced/```## Acceptance Criteria- ✅ Complete getting started tutorial- ✅ Full DSL syntax reference- ✅ All 5 layout algorithms documented- ✅ Style guide with examples- ✅ Export format documentation- ✅ Integrated into VitePress site## Effort Estimate**1-2 weeks** (8-12 working days)## Priority**High** - Critical for user adoption"
echo.

REM Issue 49: Developer Documentation Guide
echo Creating issue 49: Developer Documentation Guide...
"C:\Program Files\GitHub CLI\gh.exe" issue create --repo jgreywolf/runiq --title "Create Developer Documentation and Contribution Guides" --label "documentation" --body "# Create Developer Documentation and Contribution Guides## OverviewCreate comprehensive developer documentation to enable external contributors and guide internal development.## Current Status- ✅ Some implementation notes scattered in docs- ✅ Test-driven development guidelines in .github/copilot-instructions.md- ❌ No formal contributing guide- ❌ No shape implementation tutorial- ❌ No parser extension guide## Requirements### 1. Contributing Guidelines (1-2 days)- [ ] Code of conduct- [ ] How to set up dev environment- [ ] Branch and PR workflow- [ ] Code review process- [ ] Testing requirements- [ ] Documentation requirements- [ ] Issue templates### 2. Shape Implementation Tutorial (2-3 days)- [ ] Step-by-step shape creation- [ ] Bounds calculation patterns- [ ] Anchor point design- [ ] SVG rendering techniques- [ ] Style application- [ ] Testing new shapes- [ ] Registration and export### 3. Parser Extension Guide (2-3 days)- [ ] Langium grammar overview- [ ] Adding new diagram types- [ ] Extending DSL syntax- [ ] AST node creation- [ ] Validation rules- [ ] Code generation- [ ] Testing parser changes### 4. Layout Algorithm Integration (2 days)- [ ] ELK integration patterns- [ ] Custom layout algorithms- [ ] Layout options and constraints- [ ] Testing layout behavior### 5. Testing Best Practices (1-2 days)- [ ] Unit test patterns- [ ] Integration test examples- [ ] TDD workflow- [ ] Coverage requirements- [ ] Visual regression testing- [ ] Performance testing### 6. Architecture Documentation (2-3 days)- [ ] Monorepo structure- [ ] Package dependencies- [ ] Core abstractions- [ ] Rendering pipeline- [ ] Layout pipeline- [ ] Export system- [ ] Extension points## Structure```docs/developer/├── contributing.md├── setup.md├── architecture.md├── guides/│   ├── shape-implementation.md│   ├── parser-extension.md│   ├── layout-integration.md│   └── export-format.md├── testing/│   ├── best-practices.md│   ├── tdd-workflow.md│   └── coverage.md└── api/    ├── core.md    ├── parser.md    ├── layout.md    └── renderer.md```## Acceptance Criteria- ✅ Complete contributing guide- ✅ Shape tutorial with full example- ✅ Parser extension guide- ✅ Testing best practices- ✅ Architecture overview- ✅ All integrated into VitePress## Effort Estimate**2 weeks** (10-12 working days)## Priority**Medium** - Important for community growth"
echo.

REM Issue 50: Example Gallery
echo Creating issue 50: Example Gallery...
"C:\Program Files\GitHub CLI\gh.exe" issue create --repo jgreywolf/runiq --title "Create Interactive Example Gallery" --label "documentation" --label "enhancement" --body "# Create Interactive Example Gallery## OverviewCreate a comprehensive, interactive gallery of example diagrams showcasing all diagram types, features, and best practices.## Current Status- ✅ Some examples in examples/ directory- ✅ Quantum circuits examples- ✅ Network topology examples- ❌ No organized gallery- ❌ No interactive viewer- ❌ No search/filter capability## Requirements### Phase 1: Example Collection (3-4 days)- [ ] Beginner examples (10+)  - Basic flowcharts  - Simple UML diagrams  - State machines  - Network diagrams- [ ] Intermediate examples (15+)  - Complex flowcharts  - Multi-diagram projects  - Styled diagrams  - Container hierarchies- [ ] Advanced examples (10+)  - Quantum circuits  - Electrical circuits  - Block diagrams with exports  - Custom layouts- [ ] Industry-specific examples (10+)  - Software architecture  - Network topology  - Process automation  - Engineering diagrams### Phase 2: Gallery UI (3-4 days)- [ ] Grid/list view of examples- [ ] Live preview rendering- [ ] Category filters- [ ] Search functionality- [ ] Tags for features used- [ ] Difficulty indicators- [ ] Source code viewer- [ ] Copy to clipboard### Phase 3: Interactive Features (2-3 days)- [ ] Live editing in browser- [ ] Real-time preview- [ ] Download source- [ ] Export rendered SVG- [ ] Share via URL- [ ] Embed code generation### Phase 4: Documentation Integration (1-2 days)- [ ] Link examples to guides- [ ] Annotated examples- [ ] Best practices callouts- [ ] Common patterns showcase- [ ] Before/after comparisons## Example Categories1. **Flowcharts** (8 examples)   - Basic process flow   - Decision trees   - Swimlane diagrams   - Complex workflows2. **UML Diagrams** (10 examples)   - Class diagrams   - Sequence diagrams   - State diagrams   - Use case diagrams   - Component diagrams3. **Network Topology** (6 examples)   - Simple LAN   - Enterprise network   - Cloud architecture   - Data center   - Hybrid cloud   - Network security4. **Quantum Circuits** (5 examples)   - Bell state   - Quantum teleportation   - Grover's algorithm   - Shor's algorithm   - Quantum error correction5. **Electrical Circuits** (5 examples)   - Basic circuits   - Amplifiers   - Digital logic   - Power supply   - Signal processing6. **Software Architecture** (8 examples)   - Microservices   - Layered architecture   - Event-driven   - Client-server   - Containers/Docker   - CI/CD pipeline7. **Project Management** (4 examples)   - Gantt charts   - Kanban boards   - Roadmaps   - Dependencies8. **Data Visualization** (5 examples)   - Pie charts   - Bar charts   - Timelines   - Hierarchies   - Metrics## Gallery Structure```examples/├── gallery/│   ├── index.html│   ├── viewer.js│   └── styles.css├── beginner/│   ├── 01-simple-flowchart/│   ├── 02-basic-uml/│   └── ...├── intermediate/│   ├── 01-styled-diagram/│   ├── 02-containers/│   └── ...├── advanced/│   ├── 01-quantum-circuit/│   ├── 02-electrical/│   └── ...└── industry/    ├── software/    ├── network/    ├── engineering/    └── ...```## Acceptance Criteria- ✅ 50+ example diagrams- ✅ Interactive web gallery- ✅ Search and filter working- ✅ Live preview rendering- ✅ All examples documented- ✅ Integrated with docs site- ✅ Mobile-responsive## Effort Estimate**2 weeks** (10-12 working days)## Priority**High** - Critical for showcasing capabilities## Market Value💰💰💰💰 Very High - Examples drive adoption"
echo.

REM Issue 51: Hierarchical Container Enhancements
echo Creating issue 51: Hierarchical Container Enhancements...
"C:\Program Files\GitHub CLI\gh.exe" issue create --repo jgreywolf/runiq --title "Enhance Hierarchical Container System" --label "enhancement" --body "# Enhance Hierarchical Container System## OverviewEnhance the existing hierarchical container system with advanced features needed for C4, BPMN, and other complex diagram types.## Current Status- ✅ Basic containers work- ✅ Nested containers supported- ✅ Cross-container edges work- ❌ No collapse/expand functionality- ❌ Limited container styling- ❌ No container-aware layout optimization- ❌ No visual container controls## Blocked By**Issue #27 (C4 Architecture)** - Should implement C4 first to validate requirements## Requirements### Phase 1: Container Styling (2-3 days)- [ ] Container background colors- [ ] Container borders and padding- [ ] Container headers/titles- [ ] Container icons/badges- [ ] Nested container visual hierarchy- [ ] Container shadows and depth- [ ] Style inheritance rules### Phase 2: Collapse/Expand (3-4 days)- [ ] Collapse container to hide children- [ ] Expand to show all descendants- [ ] Partial collapse (show first level only)- [ ] Persist collapse state- [ ] Animate expand/collapse- [ ] Update layout on state change- [ ] Keyboard shortcuts### Phase 3: Container-Aware Layout (3-4 days)- [ ] Optimize layout within containers- [ ] Container size constraints- [ ] Auto-resize containers to content- [ ] Padding and margin controls- [ ] Alignment within containers- [ ] Distribution of child nodes- [ ] Cross-container edge routing optimization### Phase 4: Visual Controls (2-3 days)- [ ] Collapse/expand buttons- [ ] Resize handles- [ ] Move/drag containers- [ ] Select all children- [ ] Container context menu- [ ] Container outline view### Phase 5: Advanced Features (3-4 days)- [ ] Container templates- [ ] Container cloning- [ ] Container linking/references- [ ] Container filters (show/hide by criteria)- [ ] Container search- [ ] Container statistics (node count, etc.)- [ ] Container exports (export just one container)## DSL Syntax Extensions```runiqdiagram architecture \"System\"  container Frontend {    collapsible: true    collapsed: false    style {      fill: \"#e1f5fe\"      stroke: \"#01579b\"      padding: 20    }        node UI { shape: rect }    node Components { shape: rect }  }    container \"Backend\" {    style { fill: \"#f3e5f5\" }    header: \"Backend Services\"    icon: \"server\"        container \"API Layer\" {      node REST { }      node GraphQL { }    }        container \"Data Layer\" {      node Database { }      node Cache { }    }  }```## Testing Requirements- [ ] 25+ tests for styling- [ ] 20+ tests for collapse/expand- [ ] 30+ tests for layout- [ ] 15+ tests for visual controls- [ ] Integration tests with complex diagrams## Enables- C4 Architecture (Issue #27)- BPMN pools/lanes (Issue #28)- UML package diagrams- Deployment diagrams- Component hierarchies- Microservices architecture- And 10+ other diagram types## Acceptance Criteria- ✅ Rich container styling options- ✅ Collapse/expand functionality- ✅ Container-optimized layout- ✅ Visual controls in editor- ✅ Comprehensive tests- ✅ Documentation and examples## Effort Estimate**2-3 weeks** (13-18 working days)## Priority**CRITICAL** - Unlocks major diagram types## Dependencies- Should complete Issue #27 (C4) first to validate requirements- Works with Issue #28 (BPMN) for pools/lanes"
echo.

REM Issue 52: Specialized Academic Symbol Library
echo Creating issue 52: Specialized Academic Symbols...
"C:\Program Files\GitHub CLI\gh.exe" issue create --repo jgreywolf/runiq --title "Add Specialized Academic Symbol Library" --label "enhancement" --body "# Add Specialized Academic Symbol Library## OverviewExpand shape library with specialized symbols for academic, scientific, and mathematical diagrams.## Current Status- ✅ 71 general shapes- ✅ Quantum circuit symbols- ❌ No mathematical symbols- ❌ No logic symbols- ❌ No statistical symbols## Requirements### Mathematical Symbols (8-10 shapes)- [ ] Summation (Σ)- [ ] Product (Π)- [ ] Integral (∫)- [ ] Partial derivative (∂)- [ ] Nabla/Del (∇)- [ ] Infinity (∞)- [ ] Set operations (∪, ∩, ⊂, ⊃)- [ ] Mathematical operators### Logic Symbols (6-8 shapes)- [ ] AND gate (different from electrical)- [ ] OR gate- [ ] NOT gate- [ ] XOR gate- [ ] NAND gate- [ ] NOR gate- [ ] Implies (⇒)- [ ] Equivalence (⇔)### Statistical Symbols (6-8 shapes)- [ ] Normal distribution curve- [ ] Box plot elements- [ ] Histogram bars- [ ] Error bars- [ ] Confidence intervals- [ ] Regression line- [ ] Scatter plot points### Scientific Symbols (8-10 shapes)- [ ] Beaker/flask- [ ] Test tube- [ ] Microscope- [ ] Atom model- [ ] DNA helix- [ ] Cell structure- [ ] Molecule bonds- [ ] Lab equipment## DSL Syntax```runiqdiagram math \"Proof Diagram\"  node Sum {    shape: summation    label: \"Σ\"  }    node Integral {    shape: integral    bounds: \"a to b\"  }    edge Sum -> Integral {    label: \"converges\"  }```## Testing Requirements- [ ] 5 tests per symbol- [ ] Total ~150 tests- [ ] Bounds calculation- [ ] Anchor points- [ ] SVG rendering## Acceptance Criteria- ✅ 30-35 academic symbols- ✅ Clean mathematical rendering- ✅ Proper Unicode support- ✅ All symbols tested- ✅ Documentation## Effort Estimate**1-2 weeks** (based on symbol complexity)## Priority**Low** - Niche use case## Market Value💰 Low - Academic/research niche"
echo.

REM Issue 53: Domain-Specific Icon Library
echo Creating issue 53: Domain-Specific Icons...
"C:\Program Files\GitHub CLI\gh.exe" issue create --repo jgreywolf/runiq --title "Add Domain-Specific Icon Library" --label "enhancement" --body "# Add Domain-Specific Icon Library## OverviewCreate libraries of domain-specific icons for various industries and use cases.## Current Status- ✅ Network device icons (7 shapes)- ✅ Some UML icons- ❌ No cloud provider icons- ❌ No database icons- ❌ No DevOps icons## Requirements### Cloud Platform Icons (15-20 shapes)- [ ] AWS services (EC2, S3, Lambda, RDS, etc.)- [ ] Azure services (VMs, Storage, Functions, etc.)- [ ] GCP services (Compute, Storage, etc.)- [ ] Generic cloud shapes- [ ] Container platforms (Docker, K8s)### Database Icons (10-12 shapes)- [ ] SQL databases- [ ] NoSQL databases (MongoDB, Cassandra, etc.)- [ ] Cache (Redis, Memcached)- [ ] Data warehouse- [ ] Graph database- [ ] Time-series DB### DevOps Icons (12-15 shapes)- [ ] CI/CD pipeline components- [ ] Jenkins- [ ] GitLab CI- [ ] GitHub Actions- [ ] Build tools- [ ] Artifact repositories- [ ] Deployment targets### Business Icons (10-15 shapes)- [ ] User/customer- [ ] Team/group- [ ] Department- [ ] Partner- [ ] Vendor- [ ] Product- [ ] Service- [ ] Revenue/money- [ ] Metrics/KPIs### Security Icons (8-10 shapes)- [ ] Firewall (more detailed)- [ ] VPN- [ ] Certificate- [ ] Key/encryption- [ ] Shield/protection- [ ] Threat- [ ] Vulnerability- [ ] Audit log## Icon Design Principles- Consistent style across libraries- SVG-based, scalable- Monochrome with color options- 24x24, 48x48, 64x64 sizes- Accessible with labels- Follow brand guidelines where applicable## DSL Syntax```runiqdiagram cloud \"AWS Architecture\"  node WebApp {    shape: aws-ec2    label: \"Web Server\"  }    node Storage {    shape: aws-s3    label: \"Static Assets\"  }    node Database {    shape: aws-rds    label: \"PostgreSQL\"  }```## Icon Sources- Font Awesome integration (Issue #8 mentions this)- Custom SVG designs- Official brand assets (with permission)- Open source icon sets## Testing Requirements- [ ] 3 tests per icon- [ ] Render tests- [ ] Size consistency tests- [ ] Color variation tests## Acceptance Criteria- ✅ 50-70 domain icons- ✅ Consistent styling- ✅ All major cloud providers- ✅ Database types covered- ✅ DevOps tools represented- ✅ Documentation with examples## Effort Estimate**2-3 weeks** (icon design + implementation)## Priority**Medium** - High value for cloud/DevOps diagrams## Market Value💰💰💰 High - Cloud architecture diagrams very popular"
echo.

REM Issue 54: Decorative Elements Library
echo Creating issue 54: Decorative Elements...
"C:\Program Files\GitHub CLI\gh.exe" issue create --repo jgreywolf/runiq --title "Add Decorative Elements Library" --label "enhancement" --body "# Add Decorative Elements Library## OverviewAdd decorative and aesthetic elements to make diagrams more visually appealing and professional.## Current Status- ✅ Functional shapes work well- ❌ No decorative options- ❌ No visual embellishments- ❌ Limited presentation polish## Requirements### Borders and Frames (8-10 elements)- [ ] Rounded corner frames- [ ] Double-line borders- [ ] Dashed borders- [ ] Shadow effects- [ ] 3D effects- [ ] Gradient borders- [ ] Decorative corners- [ ] Title boxes### Backgrounds (6-8 elements)- [ ] Grid backgrounds- [ ] Dotted backgrounds- [ ] Gradient fills- [ ] Pattern fills- [ ] Image backgrounds- [ ] Watermarks- [ ] Section dividers### Annotations (8-10 elements)- [ ] Callout boxes- [ ] Speech bubbles- [ ] Thought bubbles- [ ] Sticky notes- [ ] Highlight boxes- [ ] Arrows with text- [ ] Numbered markers- [ ] Badge/label overlays### Visual Separators (5-6 elements)- [ ] Horizontal lines- [ ] Vertical dividers- [ ] Bracket connectors- [ ] Curly braces- [ ] Section headers- [ ] Swimlane dividers### Icons and Badges (10-12 elements)- [ ] Warning icons- [ ] Info icons- [ ] Success/checkmark- [ ] Error/X- [ ] Star/favorite- [ ] Flag/bookmark- [ ] Lock/unlock- [ ] New/updated badges- [ ] Priority indicators### Typography Elements (5-6 elements)- [ ] Title boxes- [ ] Subtitle styles- [ ] Caption boxes- [ ] Footnotes- [ ] Legends- [ ] Watermark text## DSL Syntax```runiqdiagram presentation \"Professional Diagram\"  decoration titleBox {    text: \"System Architecture\"    style: \"heading1\"    position: top  }    container MainContent {    background: \"gradient-blue\"    shadow: true        node A { }    node B { }  }    annotation callout1 {    target: nodeA    text: \"Critical component\"    shape: speech-bubble  }    decoration watermark {    text: \"DRAFT\"    opacity: 0.1    position: center  }```## Design Principles- Optional, non-intrusive- Enhance clarity, not distract- Consistent with diagram style- Customizable colors/sizes- Export-friendly (SVG compatible)## Use Cases- Presentation slides- Marketing materials- Documentation- Training materials- Executive summaries- Proposal documents## Testing Requirements- [ ] 3 tests per element- [ ] Rendering tests- [ ] Style combination tests- [ ] Export compatibility tests## Acceptance Criteria- ✅ 40-50 decorative elements- ✅ Professional appearance- ✅ Customizable styling- ✅ Export compatibility- ✅ Documentation with examples- ✅ Template library integration## Effort Estimate**2 weeks** (design + implementation)## Priority**Low** - Nice-to-have, not essential## Market Value💰💰 Medium - Improves professional appearance"
echo.

echo.
echo COMPLETE! Created 8 additional issues.
echo View at: https://github.com/jgreywolf/runiq/issues

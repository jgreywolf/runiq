import type {
  DefaultSharedCoreModuleContext,
  LangiumCoreServices,
  LangiumSharedCoreServices,
  Module,
  PartialLangiumCoreServices,
} from 'langium';
import {
  createDefaultCoreModule,
  createDefaultSharedCoreModule,
  inject,
} from 'langium';
import {
  RuniqGeneratedModule,
  RuniqGeneratedSharedModule,
} from './generated/module.js';
import { RuniqValueConverter } from './value-converter.js';
import { RuniqValidator, RuniqValidationRegistry } from './validator.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type RuniqAddedServices = {
  validation: {
    RuniqValidator: RuniqValidator;
  };
};

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type RuniqServices = LangiumCoreServices & RuniqAddedServices;

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const RuniqModule: Module<
  RuniqServices,
  PartialLangiumCoreServices & RuniqAddedServices
> = {
  parser: {
    ValueConverter: () => new RuniqValueConverter(),
  },
  validation: {
    RuniqValidator: () => new RuniqValidator(),
    ValidationRegistry: (services) => new RuniqValidationRegistry(services),
  },
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createRuniqServices(context: DefaultSharedCoreModuleContext): {
  shared: LangiumSharedCoreServices;
  Runiq: RuniqServices;
} {
  const shared = inject(
    createDefaultSharedCoreModule(context),
    RuniqGeneratedSharedModule
  );
  const Runiq = inject(
    createDefaultCoreModule({ shared }),
    RuniqGeneratedModule,
    RuniqModule
  );
  shared.ServiceRegistry.register(Runiq);
  return { shared, Runiq };
}

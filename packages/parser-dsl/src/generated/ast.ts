/******************************************************************************
 * This file was generated by langium-cli 4.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import * as langium from 'langium';

export const RuniqTerminals = {
    LABELED_ARROW: /-[a-zA-Z_][a-zA-Z0-9_-]*->/,
    ARROW: /->/,
    BOOLEAN: /true|false/,
    SHAPE_ID: /[a-zA-Z_][a-zA-Z0-9_]*-[a-zA-Z0-9_-]*/,
    ID: /[a-zA-Z_][a-zA-Z0-9_]*/,
    STRING: /"(?:[^"\\]|\\.)*"/,
    NUMBER: /-?[0-9]+(\.[0-9]+)?/,
    WS: /\s+/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /(\/\/|#)[^\n\r]*/,
};

export type RuniqTerminalNames = keyof typeof RuniqTerminals;

export type RuniqKeywordNames =
    | "("
    | ")"
    | ","
    | "/"
    | ":"
    | "@"
    | "BT"
    | "LR"
    | "RL"
    | "TB"
    | "["
    | "]"
    | "ac"
    | "algorithm:"
    | "analysis"
    | "as"
    | "backgroundColor:"
    | "borderColor:"
    | "borderStyle:"
    | "borderWidth:"
    | "bottom"
    | "colors:"
    | "container"
    | "dashed"
    | "data:"
    | "dc"
    | "diagram"
    | "digital"
    | "direction:"
    | "dotted"
    | "electrical"
    | "force"
    | "group"
    | "icon:"
    | "inst"
    | "label:"
    | "labelPosition:"
    | "layered"
    | "left"
    | "link:"
    | "map:"
    | "module"
    | "mrtree"
    | "net"
    | "noise"
    | "of:"
    | "op"
    | "opacity:"
    | "padding:"
    | "params:"
    | "part"
    | "pins:"
    | "ports:"
    | "radial"
    | "right"
    | "shape"
    | "showLegend:"
    | "solid"
    | "source:"
    | "spacing:"
    | "stacked:"
    | "stress"
    | "style"
    | "style:"
    | "title:"
    | "tooltip:"
    | "top"
    | "tran"
    | "type:"
    | "value:"
    | "xLabel:"
    | "yLabel:"
    | "{"
    | "}";

export type RuniqTokenNames = RuniqTerminalNames | RuniqKeywordNames;

export type AnalysisKind = 'ac' | 'dc' | 'noise' | 'op' | 'tran';

export function isAnalysisKind(item: unknown): item is AnalysisKind {
    return item === 'tran' || item === 'ac' || item === 'dc' || item === 'op' || item === 'noise';
}

export interface AnalysisStatement extends langium.AstNode {
    readonly $container: ElectricalProfile;
    readonly $type: 'AnalysisStatement';
    args?: string;
    kind: AnalysisKind;
}

export const AnalysisStatement = {
    $type: 'AnalysisStatement',
    args: 'args',
    kind: 'kind'
} as const;

export function isAnalysisStatement(item: unknown): item is AnalysisStatement {
    return reflection.isInstance(item, AnalysisStatement.$type);
}

export type BorderStyleValue = 'dashed' | 'dotted' | 'solid';

export function isBorderStyleValue(item: unknown): item is BorderStyleValue {
    return item === 'solid' || item === 'dashed' || item === 'dotted';
}

export interface BusWidth extends langium.AstNode {
    readonly $container: NetDecl | PortConnection | PortDecl;
    readonly $type: 'BusWidth';
    lsb: string;
    msb: string;
}

export const BusWidth = {
    $type: 'BusWidth',
    lsb: 'lsb',
    msb: 'msb'
} as const;

export function isBusWidth(item: unknown): item is BusWidth {
    return reflection.isInstance(item, BusWidth.$type);
}

export interface ColorsProperty extends langium.AstNode {
    readonly $container: ShapeDeclaration;
    readonly $type: 'ColorsProperty';
    value: StringArray;
}

export const ColorsProperty = {
    $type: 'ColorsProperty',
    value: 'value'
} as const;

export function isColorsProperty(item: unknown): item is ColorsProperty {
    return reflection.isInstance(item, ColorsProperty.$type);
}

export interface ContainerBlock extends langium.AstNode {
    readonly $container: ContainerBlock | DiagramProfile | GroupBlock;
    readonly $type: 'ContainerBlock';
    id?: string;
    label: string;
    properties: Array<ContainerProperty>;
    statements: Array<DiagramStatement>;
}

export const ContainerBlock = {
    $type: 'ContainerBlock',
    id: 'id',
    label: 'label',
    properties: 'properties',
    statements: 'statements'
} as const;

export function isContainerBlock(item: unknown): item is ContainerBlock {
    return reflection.isInstance(item, ContainerBlock.$type);
}

export interface ContainerLayoutProperty extends langium.AstNode {
    readonly $container: ContainerBlock;
    readonly $type: 'ContainerLayoutProperty';
    algorithm?: LayoutAlgorithmValue;
    spacing?: string;
}

export const ContainerLayoutProperty = {
    $type: 'ContainerLayoutProperty',
    algorithm: 'algorithm',
    spacing: 'spacing'
} as const;

export function isContainerLayoutProperty(item: unknown): item is ContainerLayoutProperty {
    return reflection.isInstance(item, ContainerLayoutProperty.$type);
}

export type ContainerProperty = ContainerLayoutProperty | ContainerStyleProperty | StyleRefProperty;

export const ContainerProperty = {
    $type: 'ContainerProperty'
} as const;

export function isContainerProperty(item: unknown): item is ContainerProperty {
    return reflection.isInstance(item, ContainerProperty.$type);
}

export interface ContainerStyleProperty extends langium.AstNode {
    readonly $container: ContainerBlock;
    readonly $type: 'ContainerStyleProperty';
    backgroundColor?: string;
    borderColor?: string;
    borderStyle?: BorderStyleValue;
    borderWidth?: string;
    labelPosition?: LabelPositionValue;
    opacity?: string;
    padding?: string;
}

export const ContainerStyleProperty = {
    $type: 'ContainerStyleProperty',
    backgroundColor: 'backgroundColor',
    borderColor: 'borderColor',
    borderStyle: 'borderStyle',
    borderWidth: 'borderWidth',
    labelPosition: 'labelPosition',
    opacity: 'opacity',
    padding: 'padding'
} as const;

export function isContainerStyleProperty(item: unknown): item is ContainerStyleProperty {
    return reflection.isInstance(item, ContainerStyleProperty.$type);
}

export interface DataArray extends langium.AstNode {
    readonly $container: DataObjectProperty;
    readonly $type: 'DataArray';
    items: Array<string>;
}

export const DataArray = {
    $type: 'DataArray',
    items: 'items'
} as const;

export function isDataArray(item: unknown): item is DataArray {
    return reflection.isInstance(item, DataArray.$type);
}

export type DataItem = DataObject | DataValue;

export const DataItem = {
    $type: 'DataItem'
} as const;

export function isDataItem(item: unknown): item is DataItem {
    return reflection.isInstance(item, DataItem.$type);
}

export interface DataObject extends langium.AstNode {
    readonly $container: DataProperty;
    readonly $type: 'DataObject';
    properties: Array<DataObjectProperty>;
}

export const DataObject = {
    $type: 'DataObject',
    properties: 'properties'
} as const;

export function isDataObject(item: unknown): item is DataObject {
    return reflection.isInstance(item, DataObject.$type);
}

export interface DataObjectProperty extends langium.AstNode {
    readonly $container: DataObject;
    readonly $type: 'DataObjectProperty';
    key: string;
    value: DataArray | string;
}

export const DataObjectProperty = {
    $type: 'DataObjectProperty',
    key: 'key',
    value: 'value'
} as const;

export function isDataObjectProperty(item: unknown): item is DataObjectProperty {
    return reflection.isInstance(item, DataObjectProperty.$type);
}

export interface DataProperty extends langium.AstNode {
    readonly $container: ShapeDeclaration;
    readonly $type: 'DataProperty';
    items: Array<DataItem>;
}

export const DataProperty = {
    $type: 'DataProperty',
    items: 'items'
} as const;

export function isDataProperty(item: unknown): item is DataProperty {
    return reflection.isInstance(item, DataProperty.$type);
}

export interface DataValue extends langium.AstNode {
    readonly $container: DataProperty;
    readonly $type: 'DataValue';
    value: string;
}

export const DataValue = {
    $type: 'DataValue',
    value: 'value'
} as const;

export function isDataValue(item: unknown): item is DataValue {
    return reflection.isInstance(item, DataValue.$type);
}

export interface DiagramProfile extends langium.AstNode {
    readonly $container: Document;
    readonly $type: 'DiagramProfile';
    name: string;
    statements: Array<DiagramStatement>;
}

export const DiagramProfile = {
    $type: 'DiagramProfile',
    name: 'name',
    statements: 'statements'
} as const;

export function isDiagramProfile(item: unknown): item is DiagramProfile {
    return reflection.isInstance(item, DiagramProfile.$type);
}

export type DiagramStatement = ContainerBlock | DirectionDeclaration | EdgeDeclaration | GroupBlock | ShapeDeclaration | StyleDeclaration;

export const DiagramStatement = {
    $type: 'DiagramStatement'
} as const;

export function isDiagramStatement(item: unknown): item is DiagramStatement {
    return reflection.isInstance(item, DiagramStatement.$type);
}

export interface DigitalNetStatement extends langium.AstNode {
    readonly $container: DigitalProfile;
    readonly $type: 'DigitalNetStatement';
    names: Array<NetDecl>;
}

export const DigitalNetStatement = {
    $type: 'DigitalNetStatement',
    names: 'names'
} as const;

export function isDigitalNetStatement(item: unknown): item is DigitalNetStatement {
    return reflection.isInstance(item, DigitalNetStatement.$type);
}

export interface DigitalProfile extends langium.AstNode {
    readonly $container: Document;
    readonly $type: 'DigitalProfile';
    name: string;
    statements: Array<DigitalStatement>;
}

export const DigitalProfile = {
    $type: 'DigitalProfile',
    name: 'name',
    statements: 'statements'
} as const;

export function isDigitalProfile(item: unknown): item is DigitalProfile {
    return reflection.isInstance(item, DigitalProfile.$type);
}

export type DigitalStatement = DigitalNetStatement | InstStatement | ModuleStatement;

export const DigitalStatement = {
    $type: 'DigitalStatement'
} as const;

export function isDigitalStatement(item: unknown): item is DigitalStatement {
    return reflection.isInstance(item, DigitalStatement.$type);
}

export interface DirectionDeclaration extends langium.AstNode {
    readonly $container: ContainerBlock | DiagramProfile | GroupBlock;
    readonly $type: 'DirectionDeclaration';
    value: DirectionValue;
}

export const DirectionDeclaration = {
    $type: 'DirectionDeclaration',
    value: 'value'
} as const;

export function isDirectionDeclaration(item: unknown): item is DirectionDeclaration {
    return reflection.isInstance(item, DirectionDeclaration.$type);
}

export type DirectionValue = 'BT' | 'LR' | 'RL' | 'TB';

export function isDirectionValue(item: unknown): item is DirectionValue {
    return item === 'LR' || item === 'RL' || item === 'TB' || item === 'BT';
}

export interface Document extends langium.AstNode {
    readonly $type: 'Document';
    profiles: Array<Profile>;
}

export const Document = {
    $type: 'Document',
    profiles: 'profiles'
} as const;

export function isDocument(item: unknown): item is Document {
    return reflection.isInstance(item, Document.$type);
}

export interface EdgeDeclaration extends langium.AstNode {
    readonly $container: ContainerBlock | DiagramProfile | GroupBlock;
    readonly $type: 'EdgeDeclaration';
    arrow?: string;
    from: string;
    labeledArrow?: string;
    to: string;
}

export const EdgeDeclaration = {
    $type: 'EdgeDeclaration',
    arrow: 'arrow',
    from: 'from',
    labeledArrow: 'labeledArrow',
    to: 'to'
} as const;

export function isEdgeDeclaration(item: unknown): item is EdgeDeclaration {
    return reflection.isInstance(item, EdgeDeclaration.$type);
}

export interface ElectricalProfile extends langium.AstNode {
    readonly $container: Document;
    readonly $type: 'ElectricalProfile';
    name: string;
    statements: Array<ElectricalStatement>;
}

export const ElectricalProfile = {
    $type: 'ElectricalProfile',
    name: 'name',
    statements: 'statements'
} as const;

export function isElectricalProfile(item: unknown): item is ElectricalProfile {
    return reflection.isInstance(item, ElectricalProfile.$type);
}

export type ElectricalStatement = AnalysisStatement | NetStatement | PartStatement;

export const ElectricalStatement = {
    $type: 'ElectricalStatement'
} as const;

export function isElectricalStatement(item: unknown): item is ElectricalStatement {
    return reflection.isInstance(item, ElectricalStatement.$type);
}

export interface GroupBlock extends langium.AstNode {
    readonly $container: ContainerBlock | DiagramProfile | GroupBlock;
    readonly $type: 'GroupBlock';
    label: string;
    statements: Array<DiagramStatement>;
}

export const GroupBlock = {
    $type: 'GroupBlock',
    label: 'label',
    statements: 'statements'
} as const;

export function isGroupBlock(item: unknown): item is GroupBlock {
    return reflection.isInstance(item, GroupBlock.$type);
}

export interface IconProperty extends langium.AstNode {
    readonly $container: ShapeDeclaration;
    readonly $type: 'IconProperty';
    icon: string;
    provider: string;
}

export const IconProperty = {
    $type: 'IconProperty',
    icon: 'icon',
    provider: 'provider'
} as const;

export function isIconProperty(item: unknown): item is IconProperty {
    return reflection.isInstance(item, IconProperty.$type);
}

export interface InstMapProperty extends langium.AstNode {
    readonly $container: InstStatement;
    readonly $type: 'InstMapProperty';
    connections: Array<PortConnection>;
}

export const InstMapProperty = {
    $type: 'InstMapProperty',
    connections: 'connections'
} as const;

export function isInstMapProperty(item: unknown): item is InstMapProperty {
    return reflection.isInstance(item, InstMapProperty.$type);
}

export interface InstOfProperty extends langium.AstNode {
    readonly $container: InstStatement;
    readonly $type: 'InstOfProperty';
    module: string;
}

export const InstOfProperty = {
    $type: 'InstOfProperty',
    module: 'module'
} as const;

export function isInstOfProperty(item: unknown): item is InstOfProperty {
    return reflection.isInstance(item, InstOfProperty.$type);
}

export interface InstParamsProperty extends langium.AstNode {
    readonly $container: InstStatement;
    readonly $type: 'InstParamsProperty';
    params: Array<ParamOverride>;
}

export const InstParamsProperty = {
    $type: 'InstParamsProperty',
    params: 'params'
} as const;

export function isInstParamsProperty(item: unknown): item is InstParamsProperty {
    return reflection.isInstance(item, InstParamsProperty.$type);
}

export type InstProperty = InstMapProperty | InstOfProperty | InstParamsProperty;

export const InstProperty = {
    $type: 'InstProperty'
} as const;

export function isInstProperty(item: unknown): item is InstProperty {
    return reflection.isInstance(item, InstProperty.$type);
}

export interface InstStatement extends langium.AstNode {
    readonly $container: DigitalProfile;
    readonly $type: 'InstStatement';
    properties: Array<InstProperty>;
    ref: string;
}

export const InstStatement = {
    $type: 'InstStatement',
    properties: 'properties',
    ref: 'ref'
} as const;

export function isInstStatement(item: unknown): item is InstStatement {
    return reflection.isInstance(item, InstStatement.$type);
}

export type LabelPositionValue = 'bottom' | 'left' | 'right' | 'top';

export function isLabelPositionValue(item: unknown): item is LabelPositionValue {
    return item === 'top' || item === 'bottom' || item === 'left' || item === 'right';
}

export interface LabelProperty extends langium.AstNode {
    readonly $container: ShapeDeclaration;
    readonly $type: 'LabelProperty';
    value: string;
}

export const LabelProperty = {
    $type: 'LabelProperty',
    value: 'value'
} as const;

export function isLabelProperty(item: unknown): item is LabelProperty {
    return reflection.isInstance(item, LabelProperty.$type);
}

export type LayoutAlgorithmValue = 'force' | 'layered' | 'mrtree' | 'radial' | 'stress';

export function isLayoutAlgorithmValue(item: unknown): item is LayoutAlgorithmValue {
    return item === 'layered' || item === 'force' || item === 'stress' || item === 'radial' || item === 'mrtree';
}

export interface LinkProperty extends langium.AstNode {
    readonly $container: ShapeDeclaration;
    readonly $type: 'LinkProperty';
    url: string;
}

export const LinkProperty = {
    $type: 'LinkProperty',
    url: 'url'
} as const;

export function isLinkProperty(item: unknown): item is LinkProperty {
    return reflection.isInstance(item, LinkProperty.$type);
}

export interface ModuleParamsProperty extends langium.AstNode {
    readonly $container: ModuleStatement;
    readonly $type: 'ModuleParamsProperty';
    params: Array<ParamDecl>;
}

export const ModuleParamsProperty = {
    $type: 'ModuleParamsProperty',
    params: 'params'
} as const;

export function isModuleParamsProperty(item: unknown): item is ModuleParamsProperty {
    return reflection.isInstance(item, ModuleParamsProperty.$type);
}

export interface ModulePortsProperty extends langium.AstNode {
    readonly $container: ModuleStatement;
    readonly $type: 'ModulePortsProperty';
    ports: Array<PortDecl>;
}

export const ModulePortsProperty = {
    $type: 'ModulePortsProperty',
    ports: 'ports'
} as const;

export function isModulePortsProperty(item: unknown): item is ModulePortsProperty {
    return reflection.isInstance(item, ModulePortsProperty.$type);
}

export type ModuleProperty = ModuleParamsProperty | ModulePortsProperty;

export const ModuleProperty = {
    $type: 'ModuleProperty'
} as const;

export function isModuleProperty(item: unknown): item is ModuleProperty {
    return reflection.isInstance(item, ModuleProperty.$type);
}

export interface ModuleStatement extends langium.AstNode {
    readonly $container: DigitalProfile;
    readonly $type: 'ModuleStatement';
    name: string;
    properties: Array<ModuleProperty>;
}

export const ModuleStatement = {
    $type: 'ModuleStatement',
    name: 'name',
    properties: 'properties'
} as const;

export function isModuleStatement(item: unknown): item is ModuleStatement {
    return reflection.isInstance(item, ModuleStatement.$type);
}

export interface NetDecl extends langium.AstNode {
    readonly $container: DigitalNetStatement;
    readonly $type: 'NetDecl';
    name: string;
    width?: BusWidth;
}

export const NetDecl = {
    $type: 'NetDecl',
    name: 'name',
    width: 'width'
} as const;

export function isNetDecl(item: unknown): item is NetDecl {
    return reflection.isInstance(item, NetDecl.$type);
}

export interface NetStatement extends langium.AstNode {
    readonly $container: ElectricalProfile;
    readonly $type: 'NetStatement';
    names: Array<string>;
}

export const NetStatement = {
    $type: 'NetStatement',
    names: 'names'
} as const;

export function isNetStatement(item: unknown): item is NetStatement {
    return reflection.isInstance(item, NetStatement.$type);
}

export type NodeProperty = ColorsProperty | DataProperty | IconProperty | LabelProperty | LinkProperty | ShowLegendProperty | StackedProperty | StyleRefProperty | TitleProperty | TooltipProperty | XLabelProperty | YLabelProperty;

export const NodeProperty = {
    $type: 'NodeProperty'
} as const;

export function isNodeProperty(item: unknown): item is NodeProperty {
    return reflection.isInstance(item, NodeProperty.$type);
}

export interface ParamDecl extends langium.AstNode {
    readonly $container: ModuleParamsProperty;
    readonly $type: 'ParamDecl';
    name: string;
    value: string;
}

export const ParamDecl = {
    $type: 'ParamDecl',
    name: 'name',
    value: 'value'
} as const;

export function isParamDecl(item: unknown): item is ParamDecl {
    return reflection.isInstance(item, ParamDecl.$type);
}

export interface ParamOverride extends langium.AstNode {
    readonly $container: InstParamsProperty;
    readonly $type: 'ParamOverride';
    param: string;
    value: string;
}

export const ParamOverride = {
    $type: 'ParamOverride',
    param: 'param',
    value: 'value'
} as const;

export function isParamOverride(item: unknown): item is ParamOverride {
    return reflection.isInstance(item, ParamOverride.$type);
}

export interface PartGenericProperty extends langium.AstNode {
    readonly $container: PartStatement;
    readonly $type: 'PartGenericProperty';
    key: string;
    value: string;
}

export const PartGenericProperty = {
    $type: 'PartGenericProperty',
    key: 'key',
    value: 'value'
} as const;

export function isPartGenericProperty(item: unknown): item is PartGenericProperty {
    return reflection.isInstance(item, PartGenericProperty.$type);
}

export interface PartPinsProperty extends langium.AstNode {
    readonly $container: PartStatement;
    readonly $type: 'PartPinsProperty';
    pins: Array<string>;
}

export const PartPinsProperty = {
    $type: 'PartPinsProperty',
    pins: 'pins'
} as const;

export function isPartPinsProperty(item: unknown): item is PartPinsProperty {
    return reflection.isInstance(item, PartPinsProperty.$type);
}

export type PartProperty = PartGenericProperty | PartPinsProperty | PartSourceProperty | PartTypeProperty | PartValueProperty;

export const PartProperty = {
    $type: 'PartProperty'
} as const;

export function isPartProperty(item: unknown): item is PartProperty {
    return reflection.isInstance(item, PartProperty.$type);
}

export interface PartSourceProperty extends langium.AstNode {
    readonly $container: PartStatement;
    readonly $type: 'PartSourceProperty';
    source: string;
}

export const PartSourceProperty = {
    $type: 'PartSourceProperty',
    source: 'source'
} as const;

export function isPartSourceProperty(item: unknown): item is PartSourceProperty {
    return reflection.isInstance(item, PartSourceProperty.$type);
}

export interface PartStatement extends langium.AstNode {
    readonly $container: ElectricalProfile;
    readonly $type: 'PartStatement';
    properties: Array<PartProperty>;
    ref: string;
}

export const PartStatement = {
    $type: 'PartStatement',
    properties: 'properties',
    ref: 'ref'
} as const;

export function isPartStatement(item: unknown): item is PartStatement {
    return reflection.isInstance(item, PartStatement.$type);
}

export interface PartTypeProperty extends langium.AstNode {
    readonly $container: PartStatement;
    readonly $type: 'PartTypeProperty';
    type: string;
}

export const PartTypeProperty = {
    $type: 'PartTypeProperty',
    type: 'type'
} as const;

export function isPartTypeProperty(item: unknown): item is PartTypeProperty {
    return reflection.isInstance(item, PartTypeProperty.$type);
}

export interface PartValueProperty extends langium.AstNode {
    readonly $container: PartStatement;
    readonly $type: 'PartValueProperty';
    value: string;
}

export const PartValueProperty = {
    $type: 'PartValueProperty',
    value: 'value'
} as const;

export function isPartValueProperty(item: unknown): item is PartValueProperty {
    return reflection.isInstance(item, PartValueProperty.$type);
}

export interface PortConnection extends langium.AstNode {
    readonly $container: InstMapProperty;
    readonly $type: 'PortConnection';
    net: string;
    port: string;
    range?: BusWidth;
}

export const PortConnection = {
    $type: 'PortConnection',
    net: 'net',
    port: 'port',
    range: 'range'
} as const;

export function isPortConnection(item: unknown): item is PortConnection {
    return reflection.isInstance(item, PortConnection.$type);
}

export interface PortDecl extends langium.AstNode {
    readonly $container: ModulePortsProperty;
    readonly $type: 'PortDecl';
    name: string;
    width?: BusWidth;
}

export const PortDecl = {
    $type: 'PortDecl',
    name: 'name',
    width: 'width'
} as const;

export function isPortDecl(item: unknown): item is PortDecl {
    return reflection.isInstance(item, PortDecl.$type);
}

export type Profile = DiagramProfile | DigitalProfile | ElectricalProfile;

export const Profile = {
    $type: 'Profile'
} as const;

export function isProfile(item: unknown): item is Profile {
    return reflection.isInstance(item, Profile.$type);
}

export interface ShapeDeclaration extends langium.AstNode {
    readonly $container: ContainerBlock | DiagramProfile | GroupBlock;
    readonly $type: 'ShapeDeclaration';
    id: string;
    properties: Array<NodeProperty>;
    shape: string;
}

export const ShapeDeclaration = {
    $type: 'ShapeDeclaration',
    id: 'id',
    properties: 'properties',
    shape: 'shape'
} as const;

export function isShapeDeclaration(item: unknown): item is ShapeDeclaration {
    return reflection.isInstance(item, ShapeDeclaration.$type);
}

export interface ShowLegendProperty extends langium.AstNode {
    readonly $container: ShapeDeclaration;
    readonly $type: 'ShowLegendProperty';
    value: string;
}

export const ShowLegendProperty = {
    $type: 'ShowLegendProperty',
    value: 'value'
} as const;

export function isShowLegendProperty(item: unknown): item is ShowLegendProperty {
    return reflection.isInstance(item, ShowLegendProperty.$type);
}

export interface StackedProperty extends langium.AstNode {
    readonly $container: ShapeDeclaration;
    readonly $type: 'StackedProperty';
    value: string;
}

export const StackedProperty = {
    $type: 'StackedProperty',
    value: 'value'
} as const;

export function isStackedProperty(item: unknown): item is StackedProperty {
    return reflection.isInstance(item, StackedProperty.$type);
}

export interface StringArray extends langium.AstNode {
    readonly $container: ColorsProperty;
    readonly $type: 'StringArray';
    items: Array<string>;
}

export const StringArray = {
    $type: 'StringArray',
    items: 'items'
} as const;

export function isStringArray(item: unknown): item is StringArray {
    return reflection.isInstance(item, StringArray.$type);
}

export interface StyleDeclaration extends langium.AstNode {
    readonly $container: ContainerBlock | DiagramProfile | GroupBlock;
    readonly $type: 'StyleDeclaration';
    name: string;
    properties: Array<StyleProperty>;
}

export const StyleDeclaration = {
    $type: 'StyleDeclaration',
    name: 'name',
    properties: 'properties'
} as const;

export function isStyleDeclaration(item: unknown): item is StyleDeclaration {
    return reflection.isInstance(item, StyleDeclaration.$type);
}

export interface StyleProperty extends langium.AstNode {
    readonly $container: StyleDeclaration;
    readonly $type: 'StyleProperty';
    key: string;
    value: string;
}

export const StyleProperty = {
    $type: 'StyleProperty',
    key: 'key',
    value: 'value'
} as const;

export function isStyleProperty(item: unknown): item is StyleProperty {
    return reflection.isInstance(item, StyleProperty.$type);
}

export interface StyleRefProperty extends langium.AstNode {
    readonly $container: ContainerBlock | ShapeDeclaration;
    readonly $type: 'StyleRefProperty';
    ref: langium.Reference<StyleDeclaration>;
}

export const StyleRefProperty = {
    $type: 'StyleRefProperty',
    ref: 'ref'
} as const;

export function isStyleRefProperty(item: unknown): item is StyleRefProperty {
    return reflection.isInstance(item, StyleRefProperty.$type);
}

export interface TitleProperty extends langium.AstNode {
    readonly $container: ShapeDeclaration;
    readonly $type: 'TitleProperty';
    value: string;
}

export const TitleProperty = {
    $type: 'TitleProperty',
    value: 'value'
} as const;

export function isTitleProperty(item: unknown): item is TitleProperty {
    return reflection.isInstance(item, TitleProperty.$type);
}

export interface TooltipProperty extends langium.AstNode {
    readonly $container: ShapeDeclaration;
    readonly $type: 'TooltipProperty';
    text: string;
}

export const TooltipProperty = {
    $type: 'TooltipProperty',
    text: 'text'
} as const;

export function isTooltipProperty(item: unknown): item is TooltipProperty {
    return reflection.isInstance(item, TooltipProperty.$type);
}

export interface XLabelProperty extends langium.AstNode {
    readonly $container: ShapeDeclaration;
    readonly $type: 'XLabelProperty';
    value: string;
}

export const XLabelProperty = {
    $type: 'XLabelProperty',
    value: 'value'
} as const;

export function isXLabelProperty(item: unknown): item is XLabelProperty {
    return reflection.isInstance(item, XLabelProperty.$type);
}

export interface YLabelProperty extends langium.AstNode {
    readonly $container: ShapeDeclaration;
    readonly $type: 'YLabelProperty';
    value: string;
}

export const YLabelProperty = {
    $type: 'YLabelProperty',
    value: 'value'
} as const;

export function isYLabelProperty(item: unknown): item is YLabelProperty {
    return reflection.isInstance(item, YLabelProperty.$type);
}

export type RuniqAstType = {
    AnalysisStatement: AnalysisStatement
    BusWidth: BusWidth
    ColorsProperty: ColorsProperty
    ContainerBlock: ContainerBlock
    ContainerLayoutProperty: ContainerLayoutProperty
    ContainerProperty: ContainerProperty
    ContainerStyleProperty: ContainerStyleProperty
    DataArray: DataArray
    DataItem: DataItem
    DataObject: DataObject
    DataObjectProperty: DataObjectProperty
    DataProperty: DataProperty
    DataValue: DataValue
    DiagramProfile: DiagramProfile
    DiagramStatement: DiagramStatement
    DigitalNetStatement: DigitalNetStatement
    DigitalProfile: DigitalProfile
    DigitalStatement: DigitalStatement
    DirectionDeclaration: DirectionDeclaration
    Document: Document
    EdgeDeclaration: EdgeDeclaration
    ElectricalProfile: ElectricalProfile
    ElectricalStatement: ElectricalStatement
    GroupBlock: GroupBlock
    IconProperty: IconProperty
    InstMapProperty: InstMapProperty
    InstOfProperty: InstOfProperty
    InstParamsProperty: InstParamsProperty
    InstProperty: InstProperty
    InstStatement: InstStatement
    LabelProperty: LabelProperty
    LinkProperty: LinkProperty
    ModuleParamsProperty: ModuleParamsProperty
    ModulePortsProperty: ModulePortsProperty
    ModuleProperty: ModuleProperty
    ModuleStatement: ModuleStatement
    NetDecl: NetDecl
    NetStatement: NetStatement
    NodeProperty: NodeProperty
    ParamDecl: ParamDecl
    ParamOverride: ParamOverride
    PartGenericProperty: PartGenericProperty
    PartPinsProperty: PartPinsProperty
    PartProperty: PartProperty
    PartSourceProperty: PartSourceProperty
    PartStatement: PartStatement
    PartTypeProperty: PartTypeProperty
    PartValueProperty: PartValueProperty
    PortConnection: PortConnection
    PortDecl: PortDecl
    Profile: Profile
    ShapeDeclaration: ShapeDeclaration
    ShowLegendProperty: ShowLegendProperty
    StackedProperty: StackedProperty
    StringArray: StringArray
    StyleDeclaration: StyleDeclaration
    StyleProperty: StyleProperty
    StyleRefProperty: StyleRefProperty
    TitleProperty: TitleProperty
    TooltipProperty: TooltipProperty
    XLabelProperty: XLabelProperty
    YLabelProperty: YLabelProperty
}

export class RuniqAstReflection extends langium.AbstractAstReflection {
    override readonly types = {
        AnalysisStatement: {
            name: AnalysisStatement.$type,
            properties: {
                args: {
                    name: AnalysisStatement.args
                },
                kind: {
                    name: AnalysisStatement.kind
                }
            },
            superTypes: [ElectricalStatement.$type]
        },
        BusWidth: {
            name: BusWidth.$type,
            properties: {
                lsb: {
                    name: BusWidth.lsb
                },
                msb: {
                    name: BusWidth.msb
                }
            },
            superTypes: []
        },
        ColorsProperty: {
            name: ColorsProperty.$type,
            properties: {
                value: {
                    name: ColorsProperty.value
                }
            },
            superTypes: [NodeProperty.$type]
        },
        ContainerBlock: {
            name: ContainerBlock.$type,
            properties: {
                id: {
                    name: ContainerBlock.id
                },
                label: {
                    name: ContainerBlock.label
                },
                properties: {
                    name: ContainerBlock.properties,
                    defaultValue: []
                },
                statements: {
                    name: ContainerBlock.statements,
                    defaultValue: []
                }
            },
            superTypes: [DiagramStatement.$type]
        },
        ContainerLayoutProperty: {
            name: ContainerLayoutProperty.$type,
            properties: {
                algorithm: {
                    name: ContainerLayoutProperty.algorithm
                },
                spacing: {
                    name: ContainerLayoutProperty.spacing
                }
            },
            superTypes: [ContainerProperty.$type]
        },
        ContainerProperty: {
            name: ContainerProperty.$type,
            properties: {
            },
            superTypes: []
        },
        ContainerStyleProperty: {
            name: ContainerStyleProperty.$type,
            properties: {
                backgroundColor: {
                    name: ContainerStyleProperty.backgroundColor
                },
                borderColor: {
                    name: ContainerStyleProperty.borderColor
                },
                borderStyle: {
                    name: ContainerStyleProperty.borderStyle
                },
                borderWidth: {
                    name: ContainerStyleProperty.borderWidth
                },
                labelPosition: {
                    name: ContainerStyleProperty.labelPosition
                },
                opacity: {
                    name: ContainerStyleProperty.opacity
                },
                padding: {
                    name: ContainerStyleProperty.padding
                }
            },
            superTypes: [ContainerProperty.$type]
        },
        DataArray: {
            name: DataArray.$type,
            properties: {
                items: {
                    name: DataArray.items,
                    defaultValue: []
                }
            },
            superTypes: []
        },
        DataItem: {
            name: DataItem.$type,
            properties: {
            },
            superTypes: []
        },
        DataObject: {
            name: DataObject.$type,
            properties: {
                properties: {
                    name: DataObject.properties,
                    defaultValue: []
                }
            },
            superTypes: [DataItem.$type]
        },
        DataObjectProperty: {
            name: DataObjectProperty.$type,
            properties: {
                key: {
                    name: DataObjectProperty.key
                },
                value: {
                    name: DataObjectProperty.value
                }
            },
            superTypes: []
        },
        DataProperty: {
            name: DataProperty.$type,
            properties: {
                items: {
                    name: DataProperty.items,
                    defaultValue: []
                }
            },
            superTypes: [NodeProperty.$type]
        },
        DataValue: {
            name: DataValue.$type,
            properties: {
                value: {
                    name: DataValue.value
                }
            },
            superTypes: [DataItem.$type]
        },
        DiagramProfile: {
            name: DiagramProfile.$type,
            properties: {
                name: {
                    name: DiagramProfile.name
                },
                statements: {
                    name: DiagramProfile.statements,
                    defaultValue: []
                }
            },
            superTypes: [Profile.$type]
        },
        DiagramStatement: {
            name: DiagramStatement.$type,
            properties: {
            },
            superTypes: []
        },
        DigitalNetStatement: {
            name: DigitalNetStatement.$type,
            properties: {
                names: {
                    name: DigitalNetStatement.names,
                    defaultValue: []
                }
            },
            superTypes: [DigitalStatement.$type]
        },
        DigitalProfile: {
            name: DigitalProfile.$type,
            properties: {
                name: {
                    name: DigitalProfile.name
                },
                statements: {
                    name: DigitalProfile.statements,
                    defaultValue: []
                }
            },
            superTypes: [Profile.$type]
        },
        DigitalStatement: {
            name: DigitalStatement.$type,
            properties: {
            },
            superTypes: []
        },
        DirectionDeclaration: {
            name: DirectionDeclaration.$type,
            properties: {
                value: {
                    name: DirectionDeclaration.value
                }
            },
            superTypes: [DiagramStatement.$type]
        },
        Document: {
            name: Document.$type,
            properties: {
                profiles: {
                    name: Document.profiles,
                    defaultValue: []
                }
            },
            superTypes: []
        },
        EdgeDeclaration: {
            name: EdgeDeclaration.$type,
            properties: {
                arrow: {
                    name: EdgeDeclaration.arrow
                },
                from: {
                    name: EdgeDeclaration.from
                },
                labeledArrow: {
                    name: EdgeDeclaration.labeledArrow
                },
                to: {
                    name: EdgeDeclaration.to
                }
            },
            superTypes: [DiagramStatement.$type]
        },
        ElectricalProfile: {
            name: ElectricalProfile.$type,
            properties: {
                name: {
                    name: ElectricalProfile.name
                },
                statements: {
                    name: ElectricalProfile.statements,
                    defaultValue: []
                }
            },
            superTypes: [Profile.$type]
        },
        ElectricalStatement: {
            name: ElectricalStatement.$type,
            properties: {
            },
            superTypes: []
        },
        GroupBlock: {
            name: GroupBlock.$type,
            properties: {
                label: {
                    name: GroupBlock.label
                },
                statements: {
                    name: GroupBlock.statements,
                    defaultValue: []
                }
            },
            superTypes: [DiagramStatement.$type]
        },
        IconProperty: {
            name: IconProperty.$type,
            properties: {
                icon: {
                    name: IconProperty.icon
                },
                provider: {
                    name: IconProperty.provider
                }
            },
            superTypes: [NodeProperty.$type]
        },
        InstMapProperty: {
            name: InstMapProperty.$type,
            properties: {
                connections: {
                    name: InstMapProperty.connections,
                    defaultValue: []
                }
            },
            superTypes: [InstProperty.$type]
        },
        InstOfProperty: {
            name: InstOfProperty.$type,
            properties: {
                module: {
                    name: InstOfProperty.module
                }
            },
            superTypes: [InstProperty.$type]
        },
        InstParamsProperty: {
            name: InstParamsProperty.$type,
            properties: {
                params: {
                    name: InstParamsProperty.params,
                    defaultValue: []
                }
            },
            superTypes: [InstProperty.$type]
        },
        InstProperty: {
            name: InstProperty.$type,
            properties: {
            },
            superTypes: []
        },
        InstStatement: {
            name: InstStatement.$type,
            properties: {
                properties: {
                    name: InstStatement.properties,
                    defaultValue: []
                },
                ref: {
                    name: InstStatement.ref
                }
            },
            superTypes: [DigitalStatement.$type]
        },
        LabelProperty: {
            name: LabelProperty.$type,
            properties: {
                value: {
                    name: LabelProperty.value
                }
            },
            superTypes: [NodeProperty.$type]
        },
        LinkProperty: {
            name: LinkProperty.$type,
            properties: {
                url: {
                    name: LinkProperty.url
                }
            },
            superTypes: [NodeProperty.$type]
        },
        ModuleParamsProperty: {
            name: ModuleParamsProperty.$type,
            properties: {
                params: {
                    name: ModuleParamsProperty.params,
                    defaultValue: []
                }
            },
            superTypes: [ModuleProperty.$type]
        },
        ModulePortsProperty: {
            name: ModulePortsProperty.$type,
            properties: {
                ports: {
                    name: ModulePortsProperty.ports,
                    defaultValue: []
                }
            },
            superTypes: [ModuleProperty.$type]
        },
        ModuleProperty: {
            name: ModuleProperty.$type,
            properties: {
            },
            superTypes: []
        },
        ModuleStatement: {
            name: ModuleStatement.$type,
            properties: {
                name: {
                    name: ModuleStatement.name
                },
                properties: {
                    name: ModuleStatement.properties,
                    defaultValue: []
                }
            },
            superTypes: [DigitalStatement.$type]
        },
        NetDecl: {
            name: NetDecl.$type,
            properties: {
                name: {
                    name: NetDecl.name
                },
                width: {
                    name: NetDecl.width
                }
            },
            superTypes: []
        },
        NetStatement: {
            name: NetStatement.$type,
            properties: {
                names: {
                    name: NetStatement.names,
                    defaultValue: []
                }
            },
            superTypes: [ElectricalStatement.$type]
        },
        NodeProperty: {
            name: NodeProperty.$type,
            properties: {
            },
            superTypes: []
        },
        ParamDecl: {
            name: ParamDecl.$type,
            properties: {
                name: {
                    name: ParamDecl.name
                },
                value: {
                    name: ParamDecl.value
                }
            },
            superTypes: []
        },
        ParamOverride: {
            name: ParamOverride.$type,
            properties: {
                param: {
                    name: ParamOverride.param
                },
                value: {
                    name: ParamOverride.value
                }
            },
            superTypes: []
        },
        PartGenericProperty: {
            name: PartGenericProperty.$type,
            properties: {
                key: {
                    name: PartGenericProperty.key
                },
                value: {
                    name: PartGenericProperty.value
                }
            },
            superTypes: [PartProperty.$type]
        },
        PartPinsProperty: {
            name: PartPinsProperty.$type,
            properties: {
                pins: {
                    name: PartPinsProperty.pins,
                    defaultValue: []
                }
            },
            superTypes: [PartProperty.$type]
        },
        PartProperty: {
            name: PartProperty.$type,
            properties: {
            },
            superTypes: []
        },
        PartSourceProperty: {
            name: PartSourceProperty.$type,
            properties: {
                source: {
                    name: PartSourceProperty.source
                }
            },
            superTypes: [PartProperty.$type]
        },
        PartStatement: {
            name: PartStatement.$type,
            properties: {
                properties: {
                    name: PartStatement.properties,
                    defaultValue: []
                },
                ref: {
                    name: PartStatement.ref
                }
            },
            superTypes: [ElectricalStatement.$type]
        },
        PartTypeProperty: {
            name: PartTypeProperty.$type,
            properties: {
                type: {
                    name: PartTypeProperty.type
                }
            },
            superTypes: [PartProperty.$type]
        },
        PartValueProperty: {
            name: PartValueProperty.$type,
            properties: {
                value: {
                    name: PartValueProperty.value
                }
            },
            superTypes: [PartProperty.$type]
        },
        PortConnection: {
            name: PortConnection.$type,
            properties: {
                net: {
                    name: PortConnection.net
                },
                port: {
                    name: PortConnection.port
                },
                range: {
                    name: PortConnection.range
                }
            },
            superTypes: []
        },
        PortDecl: {
            name: PortDecl.$type,
            properties: {
                name: {
                    name: PortDecl.name
                },
                width: {
                    name: PortDecl.width
                }
            },
            superTypes: []
        },
        Profile: {
            name: Profile.$type,
            properties: {
            },
            superTypes: []
        },
        ShapeDeclaration: {
            name: ShapeDeclaration.$type,
            properties: {
                id: {
                    name: ShapeDeclaration.id
                },
                properties: {
                    name: ShapeDeclaration.properties,
                    defaultValue: []
                },
                shape: {
                    name: ShapeDeclaration.shape
                }
            },
            superTypes: [DiagramStatement.$type]
        },
        ShowLegendProperty: {
            name: ShowLegendProperty.$type,
            properties: {
                value: {
                    name: ShowLegendProperty.value
                }
            },
            superTypes: [NodeProperty.$type]
        },
        StackedProperty: {
            name: StackedProperty.$type,
            properties: {
                value: {
                    name: StackedProperty.value
                }
            },
            superTypes: [NodeProperty.$type]
        },
        StringArray: {
            name: StringArray.$type,
            properties: {
                items: {
                    name: StringArray.items,
                    defaultValue: []
                }
            },
            superTypes: []
        },
        StyleDeclaration: {
            name: StyleDeclaration.$type,
            properties: {
                name: {
                    name: StyleDeclaration.name
                },
                properties: {
                    name: StyleDeclaration.properties,
                    defaultValue: []
                }
            },
            superTypes: [DiagramStatement.$type]
        },
        StyleProperty: {
            name: StyleProperty.$type,
            properties: {
                key: {
                    name: StyleProperty.key
                },
                value: {
                    name: StyleProperty.value
                }
            },
            superTypes: []
        },
        StyleRefProperty: {
            name: StyleRefProperty.$type,
            properties: {
                ref: {
                    name: StyleRefProperty.ref,
                    referenceType: StyleDeclaration.$type
                }
            },
            superTypes: [ContainerProperty.$type, NodeProperty.$type]
        },
        TitleProperty: {
            name: TitleProperty.$type,
            properties: {
                value: {
                    name: TitleProperty.value
                }
            },
            superTypes: [NodeProperty.$type]
        },
        TooltipProperty: {
            name: TooltipProperty.$type,
            properties: {
                text: {
                    name: TooltipProperty.text
                }
            },
            superTypes: [NodeProperty.$type]
        },
        XLabelProperty: {
            name: XLabelProperty.$type,
            properties: {
                value: {
                    name: XLabelProperty.value
                }
            },
            superTypes: [NodeProperty.$type]
        },
        YLabelProperty: {
            name: YLabelProperty.$type,
            properties: {
                value: {
                    name: YLabelProperty.value
                }
            },
            superTypes: [NodeProperty.$type]
        }
    } as const satisfies langium.AstMetaData
}

export const reflection = new RuniqAstReflection();

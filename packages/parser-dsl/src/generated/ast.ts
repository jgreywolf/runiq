/******************************************************************************
 * This file was generated by langium-cli 4.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import * as langium from 'langium';

export const RuniqTerminals = {
    LABELED_ARROW: /-[a-zA-Z_][a-zA-Z0-9_-]*->/,
    ARROW: /->/,
    BOOLEAN: /true|false/,
    SHAPE_ID: /[a-zA-Z_][a-zA-Z0-9_]*-[a-zA-Z0-9_-]*/,
    ID: /[a-zA-Z_][a-zA-Z0-9_]*/,
    STRING: /"(?:[^"\\]|\\.)*"/,
    NUMBER: /-?[0-9]+(\.[0-9]+)?/,
    WS: /\s+/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /(\/\/|#)[^\n\r]*/,
};

export type RuniqTerminalNames = keyof typeof RuniqTerminals;

export type RuniqKeywordNames =
    | ","
    | "/"
    | ":"
    | "@"
    | "BT"
    | "LR"
    | "RL"
    | "TB"
    | "["
    | "]"
    | "algorithm:"
    | "as"
    | "backgroundColor:"
    | "borderColor:"
    | "borderStyle:"
    | "borderWidth:"
    | "bottom"
    | "container"
    | "dashed"
    | "data:"
    | "diagram"
    | "direction:"
    | "dotted"
    | "force"
    | "group"
    | "icon:"
    | "label:"
    | "labelPosition:"
    | "layered"
    | "left"
    | "link:"
    | "mrtree"
    | "opacity:"
    | "padding:"
    | "radial"
    | "right"
    | "shape"
    | "showLegend:"
    | "solid"
    | "spacing:"
    | "stacked:"
    | "stress"
    | "style"
    | "style:"
    | "tooltip:"
    | "top"
    | "{"
    | "}";

export type RuniqTokenNames = RuniqTerminalNames | RuniqKeywordNames;

export type BorderStyleValue = 'dashed' | 'dotted' | 'solid';

export function isBorderStyleValue(item: unknown): item is BorderStyleValue {
    return item === 'solid' || item === 'dashed' || item === 'dotted';
}

export interface ContainerBlock extends langium.AstNode {
    readonly $container: ContainerBlock | Document | GroupBlock;
    readonly $type: 'ContainerBlock';
    id?: string;
    label: string;
    properties: Array<ContainerProperty>;
    statements: Array<Statement>;
}

export const ContainerBlock = {
    $type: 'ContainerBlock',
    id: 'id',
    label: 'label',
    properties: 'properties',
    statements: 'statements'
} as const;

export function isContainerBlock(item: unknown): item is ContainerBlock {
    return reflection.isInstance(item, ContainerBlock.$type);
}

export interface ContainerLayoutProperty extends langium.AstNode {
    readonly $container: ContainerBlock;
    readonly $type: 'ContainerLayoutProperty';
    algorithm?: LayoutAlgorithmValue;
    spacing?: string;
}

export const ContainerLayoutProperty = {
    $type: 'ContainerLayoutProperty',
    algorithm: 'algorithm',
    spacing: 'spacing'
} as const;

export function isContainerLayoutProperty(item: unknown): item is ContainerLayoutProperty {
    return reflection.isInstance(item, ContainerLayoutProperty.$type);
}

export type ContainerProperty = ContainerLayoutProperty | ContainerStyleProperty | StyleRefProperty;

export const ContainerProperty = {
    $type: 'ContainerProperty'
} as const;

export function isContainerProperty(item: unknown): item is ContainerProperty {
    return reflection.isInstance(item, ContainerProperty.$type);
}

export interface ContainerStyleProperty extends langium.AstNode {
    readonly $container: ContainerBlock;
    readonly $type: 'ContainerStyleProperty';
    backgroundColor?: string;
    borderColor?: string;
    borderStyle?: BorderStyleValue;
    borderWidth?: string;
    labelPosition?: LabelPositionValue;
    opacity?: string;
    padding?: string;
}

export const ContainerStyleProperty = {
    $type: 'ContainerStyleProperty',
    backgroundColor: 'backgroundColor',
    borderColor: 'borderColor',
    borderStyle: 'borderStyle',
    borderWidth: 'borderWidth',
    labelPosition: 'labelPosition',
    opacity: 'opacity',
    padding: 'padding'
} as const;

export function isContainerStyleProperty(item: unknown): item is ContainerStyleProperty {
    return reflection.isInstance(item, ContainerStyleProperty.$type);
}

export interface DataArray extends langium.AstNode {
    readonly $container: DataObjectProperty;
    readonly $type: 'DataArray';
    items: Array<string>;
}

export const DataArray = {
    $type: 'DataArray',
    items: 'items'
} as const;

export function isDataArray(item: unknown): item is DataArray {
    return reflection.isInstance(item, DataArray.$type);
}

export type DataItem = DataObject | DataValue;

export const DataItem = {
    $type: 'DataItem'
} as const;

export function isDataItem(item: unknown): item is DataItem {
    return reflection.isInstance(item, DataItem.$type);
}

export interface DataObject extends langium.AstNode {
    readonly $container: DataProperty;
    readonly $type: 'DataObject';
    properties: Array<DataObjectProperty>;
}

export const DataObject = {
    $type: 'DataObject',
    properties: 'properties'
} as const;

export function isDataObject(item: unknown): item is DataObject {
    return reflection.isInstance(item, DataObject.$type);
}

export interface DataObjectProperty extends langium.AstNode {
    readonly $container: DataObject;
    readonly $type: 'DataObjectProperty';
    key: string;
    value: DataArray | string;
}

export const DataObjectProperty = {
    $type: 'DataObjectProperty',
    key: 'key',
    value: 'value'
} as const;

export function isDataObjectProperty(item: unknown): item is DataObjectProperty {
    return reflection.isInstance(item, DataObjectProperty.$type);
}

export interface DataProperty extends langium.AstNode {
    readonly $container: ShapeDeclaration;
    readonly $type: 'DataProperty';
    items: Array<DataItem>;
}

export const DataProperty = {
    $type: 'DataProperty',
    items: 'items'
} as const;

export function isDataProperty(item: unknown): item is DataProperty {
    return reflection.isInstance(item, DataProperty.$type);
}

export interface DataValue extends langium.AstNode {
    readonly $container: DataProperty;
    readonly $type: 'DataValue';
    value: string;
}

export const DataValue = {
    $type: 'DataValue',
    value: 'value'
} as const;

export function isDataValue(item: unknown): item is DataValue {
    return reflection.isInstance(item, DataValue.$type);
}

export interface DiagramDeclaration extends langium.AstNode {
    readonly $container: ContainerBlock | Document | GroupBlock;
    readonly $type: 'DiagramDeclaration';
    type: string;
}

export const DiagramDeclaration = {
    $type: 'DiagramDeclaration',
    type: 'type'
} as const;

export function isDiagramDeclaration(item: unknown): item is DiagramDeclaration {
    return reflection.isInstance(item, DiagramDeclaration.$type);
}

export interface DirectionDeclaration extends langium.AstNode {
    readonly $container: ContainerBlock | Document | GroupBlock;
    readonly $type: 'DirectionDeclaration';
    value: DirectionValue;
}

export const DirectionDeclaration = {
    $type: 'DirectionDeclaration',
    value: 'value'
} as const;

export function isDirectionDeclaration(item: unknown): item is DirectionDeclaration {
    return reflection.isInstance(item, DirectionDeclaration.$type);
}

export type DirectionValue = 'BT' | 'LR' | 'RL' | 'TB';

export function isDirectionValue(item: unknown): item is DirectionValue {
    return item === 'LR' || item === 'RL' || item === 'TB' || item === 'BT';
}

export interface Document extends langium.AstNode {
    readonly $type: 'Document';
    statements: Array<Statement>;
}

export const Document = {
    $type: 'Document',
    statements: 'statements'
} as const;

export function isDocument(item: unknown): item is Document {
    return reflection.isInstance(item, Document.$type);
}

export interface EdgeDeclaration extends langium.AstNode {
    readonly $container: ContainerBlock | Document | GroupBlock;
    readonly $type: 'EdgeDeclaration';
    arrow?: string;
    from: string;
    labeledArrow?: string;
    to: string;
}

export const EdgeDeclaration = {
    $type: 'EdgeDeclaration',
    arrow: 'arrow',
    from: 'from',
    labeledArrow: 'labeledArrow',
    to: 'to'
} as const;

export function isEdgeDeclaration(item: unknown): item is EdgeDeclaration {
    return reflection.isInstance(item, EdgeDeclaration.$type);
}

export interface GroupBlock extends langium.AstNode {
    readonly $container: ContainerBlock | Document | GroupBlock;
    readonly $type: 'GroupBlock';
    label: string;
    statements: Array<Statement>;
}

export const GroupBlock = {
    $type: 'GroupBlock',
    label: 'label',
    statements: 'statements'
} as const;

export function isGroupBlock(item: unknown): item is GroupBlock {
    return reflection.isInstance(item, GroupBlock.$type);
}

export interface IconProperty extends langium.AstNode {
    readonly $container: ShapeDeclaration;
    readonly $type: 'IconProperty';
    icon: string;
    provider: string;
}

export const IconProperty = {
    $type: 'IconProperty',
    icon: 'icon',
    provider: 'provider'
} as const;

export function isIconProperty(item: unknown): item is IconProperty {
    return reflection.isInstance(item, IconProperty.$type);
}

export type LabelPositionValue = 'bottom' | 'left' | 'right' | 'top';

export function isLabelPositionValue(item: unknown): item is LabelPositionValue {
    return item === 'top' || item === 'bottom' || item === 'left' || item === 'right';
}

export interface LabelProperty extends langium.AstNode {
    readonly $container: ShapeDeclaration;
    readonly $type: 'LabelProperty';
    value: string;
}

export const LabelProperty = {
    $type: 'LabelProperty',
    value: 'value'
} as const;

export function isLabelProperty(item: unknown): item is LabelProperty {
    return reflection.isInstance(item, LabelProperty.$type);
}

export type LayoutAlgorithmValue = 'force' | 'layered' | 'mrtree' | 'radial' | 'stress';

export function isLayoutAlgorithmValue(item: unknown): item is LayoutAlgorithmValue {
    return item === 'layered' || item === 'force' || item === 'stress' || item === 'radial' || item === 'mrtree';
}

export interface LinkProperty extends langium.AstNode {
    readonly $container: ShapeDeclaration;
    readonly $type: 'LinkProperty';
    url: string;
}

export const LinkProperty = {
    $type: 'LinkProperty',
    url: 'url'
} as const;

export function isLinkProperty(item: unknown): item is LinkProperty {
    return reflection.isInstance(item, LinkProperty.$type);
}

export type NodeProperty = DataProperty | IconProperty | LabelProperty | LinkProperty | ShowLegendProperty | StackedProperty | StyleRefProperty | TooltipProperty;

export const NodeProperty = {
    $type: 'NodeProperty'
} as const;

export function isNodeProperty(item: unknown): item is NodeProperty {
    return reflection.isInstance(item, NodeProperty.$type);
}

export interface ShapeDeclaration extends langium.AstNode {
    readonly $container: ContainerBlock | Document | GroupBlock;
    readonly $type: 'ShapeDeclaration';
    id: string;
    properties: Array<NodeProperty>;
    shape: string;
}

export const ShapeDeclaration = {
    $type: 'ShapeDeclaration',
    id: 'id',
    properties: 'properties',
    shape: 'shape'
} as const;

export function isShapeDeclaration(item: unknown): item is ShapeDeclaration {
    return reflection.isInstance(item, ShapeDeclaration.$type);
}

export interface ShowLegendProperty extends langium.AstNode {
    readonly $container: ShapeDeclaration;
    readonly $type: 'ShowLegendProperty';
    value: string;
}

export const ShowLegendProperty = {
    $type: 'ShowLegendProperty',
    value: 'value'
} as const;

export function isShowLegendProperty(item: unknown): item is ShowLegendProperty {
    return reflection.isInstance(item, ShowLegendProperty.$type);
}

export interface StackedProperty extends langium.AstNode {
    readonly $container: ShapeDeclaration;
    readonly $type: 'StackedProperty';
    value: string;
}

export const StackedProperty = {
    $type: 'StackedProperty',
    value: 'value'
} as const;

export function isStackedProperty(item: unknown): item is StackedProperty {
    return reflection.isInstance(item, StackedProperty.$type);
}

export type Statement = ContainerBlock | DiagramDeclaration | DirectionDeclaration | EdgeDeclaration | GroupBlock | ShapeDeclaration | StyleDeclaration;

export const Statement = {
    $type: 'Statement'
} as const;

export function isStatement(item: unknown): item is Statement {
    return reflection.isInstance(item, Statement.$type);
}

export interface StyleDeclaration extends langium.AstNode {
    readonly $container: ContainerBlock | Document | GroupBlock;
    readonly $type: 'StyleDeclaration';
    name: string;
    properties: Array<StyleProperty>;
}

export const StyleDeclaration = {
    $type: 'StyleDeclaration',
    name: 'name',
    properties: 'properties'
} as const;

export function isStyleDeclaration(item: unknown): item is StyleDeclaration {
    return reflection.isInstance(item, StyleDeclaration.$type);
}

export interface StyleProperty extends langium.AstNode {
    readonly $container: StyleDeclaration;
    readonly $type: 'StyleProperty';
    key: string;
    value: string;
}

export const StyleProperty = {
    $type: 'StyleProperty',
    key: 'key',
    value: 'value'
} as const;

export function isStyleProperty(item: unknown): item is StyleProperty {
    return reflection.isInstance(item, StyleProperty.$type);
}

export interface StyleRefProperty extends langium.AstNode {
    readonly $container: ContainerBlock | ShapeDeclaration;
    readonly $type: 'StyleRefProperty';
    ref: langium.Reference<StyleDeclaration>;
}

export const StyleRefProperty = {
    $type: 'StyleRefProperty',
    ref: 'ref'
} as const;

export function isStyleRefProperty(item: unknown): item is StyleRefProperty {
    return reflection.isInstance(item, StyleRefProperty.$type);
}

export interface TooltipProperty extends langium.AstNode {
    readonly $container: ShapeDeclaration;
    readonly $type: 'TooltipProperty';
    text: string;
}

export const TooltipProperty = {
    $type: 'TooltipProperty',
    text: 'text'
} as const;

export function isTooltipProperty(item: unknown): item is TooltipProperty {
    return reflection.isInstance(item, TooltipProperty.$type);
}

export type RuniqAstType = {
    ContainerBlock: ContainerBlock
    ContainerLayoutProperty: ContainerLayoutProperty
    ContainerProperty: ContainerProperty
    ContainerStyleProperty: ContainerStyleProperty
    DataArray: DataArray
    DataItem: DataItem
    DataObject: DataObject
    DataObjectProperty: DataObjectProperty
    DataProperty: DataProperty
    DataValue: DataValue
    DiagramDeclaration: DiagramDeclaration
    DirectionDeclaration: DirectionDeclaration
    Document: Document
    EdgeDeclaration: EdgeDeclaration
    GroupBlock: GroupBlock
    IconProperty: IconProperty
    LabelProperty: LabelProperty
    LinkProperty: LinkProperty
    NodeProperty: NodeProperty
    ShapeDeclaration: ShapeDeclaration
    ShowLegendProperty: ShowLegendProperty
    StackedProperty: StackedProperty
    Statement: Statement
    StyleDeclaration: StyleDeclaration
    StyleProperty: StyleProperty
    StyleRefProperty: StyleRefProperty
    TooltipProperty: TooltipProperty
}

export class RuniqAstReflection extends langium.AbstractAstReflection {
    override readonly types = {
        ContainerBlock: {
            name: ContainerBlock.$type,
            properties: {
                id: {
                    name: ContainerBlock.id
                },
                label: {
                    name: ContainerBlock.label
                },
                properties: {
                    name: ContainerBlock.properties,
                    defaultValue: []
                },
                statements: {
                    name: ContainerBlock.statements,
                    defaultValue: []
                }
            },
            superTypes: [Statement.$type]
        },
        ContainerLayoutProperty: {
            name: ContainerLayoutProperty.$type,
            properties: {
                algorithm: {
                    name: ContainerLayoutProperty.algorithm
                },
                spacing: {
                    name: ContainerLayoutProperty.spacing
                }
            },
            superTypes: [ContainerProperty.$type]
        },
        ContainerProperty: {
            name: ContainerProperty.$type,
            properties: {
            },
            superTypes: []
        },
        ContainerStyleProperty: {
            name: ContainerStyleProperty.$type,
            properties: {
                backgroundColor: {
                    name: ContainerStyleProperty.backgroundColor
                },
                borderColor: {
                    name: ContainerStyleProperty.borderColor
                },
                borderStyle: {
                    name: ContainerStyleProperty.borderStyle
                },
                borderWidth: {
                    name: ContainerStyleProperty.borderWidth
                },
                labelPosition: {
                    name: ContainerStyleProperty.labelPosition
                },
                opacity: {
                    name: ContainerStyleProperty.opacity
                },
                padding: {
                    name: ContainerStyleProperty.padding
                }
            },
            superTypes: [ContainerProperty.$type]
        },
        DataArray: {
            name: DataArray.$type,
            properties: {
                items: {
                    name: DataArray.items,
                    defaultValue: []
                }
            },
            superTypes: []
        },
        DataItem: {
            name: DataItem.$type,
            properties: {
            },
            superTypes: []
        },
        DataObject: {
            name: DataObject.$type,
            properties: {
                properties: {
                    name: DataObject.properties,
                    defaultValue: []
                }
            },
            superTypes: [DataItem.$type]
        },
        DataObjectProperty: {
            name: DataObjectProperty.$type,
            properties: {
                key: {
                    name: DataObjectProperty.key
                },
                value: {
                    name: DataObjectProperty.value
                }
            },
            superTypes: []
        },
        DataProperty: {
            name: DataProperty.$type,
            properties: {
                items: {
                    name: DataProperty.items,
                    defaultValue: []
                }
            },
            superTypes: [NodeProperty.$type]
        },
        DataValue: {
            name: DataValue.$type,
            properties: {
                value: {
                    name: DataValue.value
                }
            },
            superTypes: [DataItem.$type]
        },
        DiagramDeclaration: {
            name: DiagramDeclaration.$type,
            properties: {
                type: {
                    name: DiagramDeclaration.type
                }
            },
            superTypes: [Statement.$type]
        },
        DirectionDeclaration: {
            name: DirectionDeclaration.$type,
            properties: {
                value: {
                    name: DirectionDeclaration.value
                }
            },
            superTypes: [Statement.$type]
        },
        Document: {
            name: Document.$type,
            properties: {
                statements: {
                    name: Document.statements,
                    defaultValue: []
                }
            },
            superTypes: []
        },
        EdgeDeclaration: {
            name: EdgeDeclaration.$type,
            properties: {
                arrow: {
                    name: EdgeDeclaration.arrow
                },
                from: {
                    name: EdgeDeclaration.from
                },
                labeledArrow: {
                    name: EdgeDeclaration.labeledArrow
                },
                to: {
                    name: EdgeDeclaration.to
                }
            },
            superTypes: [Statement.$type]
        },
        GroupBlock: {
            name: GroupBlock.$type,
            properties: {
                label: {
                    name: GroupBlock.label
                },
                statements: {
                    name: GroupBlock.statements,
                    defaultValue: []
                }
            },
            superTypes: [Statement.$type]
        },
        IconProperty: {
            name: IconProperty.$type,
            properties: {
                icon: {
                    name: IconProperty.icon
                },
                provider: {
                    name: IconProperty.provider
                }
            },
            superTypes: [NodeProperty.$type]
        },
        LabelProperty: {
            name: LabelProperty.$type,
            properties: {
                value: {
                    name: LabelProperty.value
                }
            },
            superTypes: [NodeProperty.$type]
        },
        LinkProperty: {
            name: LinkProperty.$type,
            properties: {
                url: {
                    name: LinkProperty.url
                }
            },
            superTypes: [NodeProperty.$type]
        },
        NodeProperty: {
            name: NodeProperty.$type,
            properties: {
            },
            superTypes: []
        },
        ShapeDeclaration: {
            name: ShapeDeclaration.$type,
            properties: {
                id: {
                    name: ShapeDeclaration.id
                },
                properties: {
                    name: ShapeDeclaration.properties,
                    defaultValue: []
                },
                shape: {
                    name: ShapeDeclaration.shape
                }
            },
            superTypes: [Statement.$type]
        },
        ShowLegendProperty: {
            name: ShowLegendProperty.$type,
            properties: {
                value: {
                    name: ShowLegendProperty.value
                }
            },
            superTypes: [NodeProperty.$type]
        },
        StackedProperty: {
            name: StackedProperty.$type,
            properties: {
                value: {
                    name: StackedProperty.value
                }
            },
            superTypes: [NodeProperty.$type]
        },
        Statement: {
            name: Statement.$type,
            properties: {
            },
            superTypes: []
        },
        StyleDeclaration: {
            name: StyleDeclaration.$type,
            properties: {
                name: {
                    name: StyleDeclaration.name
                },
                properties: {
                    name: StyleDeclaration.properties,
                    defaultValue: []
                }
            },
            superTypes: [Statement.$type]
        },
        StyleProperty: {
            name: StyleProperty.$type,
            properties: {
                key: {
                    name: StyleProperty.key
                },
                value: {
                    name: StyleProperty.value
                }
            },
            superTypes: []
        },
        StyleRefProperty: {
            name: StyleRefProperty.$type,
            properties: {
                ref: {
                    name: StyleRefProperty.ref,
                    referenceType: StyleDeclaration.$type
                }
            },
            superTypes: [ContainerProperty.$type, NodeProperty.$type]
        },
        TooltipProperty: {
            name: TooltipProperty.$type,
            properties: {
                text: {
                    name: TooltipProperty.text
                }
            },
            superTypes: [NodeProperty.$type]
        }
    } as const satisfies langium.AstMetaData
}

export const reflection = new RuniqAstReflection();
